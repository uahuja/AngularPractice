username.validator.ts


import { AbstractControl, ValidationErrors } from '@angular/forms';
import { promise } from 'protractor';


export class UsernameValidators{

 static   cannotContainSpace(control : AbstractControl) : ValidationErrors | null {
        if((control.value as string).indexOf(' ')>=0)
            return {
                cannotContainSpace : true
            };

            /* return { minlength : {
                requiredLength : 10,
                actualLength : control.value.length
            }} */
            
        return null;
    }

static shouldBeUnique( control : AbstractControl) : Promise< ValidationErrors | null> {
    return new Promise((resolve,reject) => {
        setTimeout(()=> {
            if(control.value==="mosh")
                resolve({shouldBeUnique : true});
            else 
                resolve(null);

        },2000);
    });
}
}

********************************************************************
signup-comp.ts


import { UsernameValidators } from './username.validators';
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms'
@Component({
  selector: 'signup-form',
  templateUrl: './signup-form.component.html',
  styleUrls: ['./signup-form.component.css']
})
export class SignupFormComponent  {

  form = new FormGroup({

   // "user-name" : new FormControl(),           Key Should be in quotes if you want to use special characters. Normal is ok by JS 
    username : new FormControl('', 
                                    Validators.required, 
                                    UsernameValidators.shouldBeUnique),     
    password : new FormControl('',Validators.required)
  });

  get username(){
    return this.form.get('username');
  }
}


*************************************************************
signup.comp.html




<form [formGroup]="form">
  <div class="form-group">
    <label for="username">Username</label>
    <input 

        formControlName="username"
        id="username" 
        type="text" 
        class="form-control">
    </div>
    <!-- <div *ngIf= " form.get('username').touched && form.get('username').invalid " class="alert alert-danger">Username is Required</div> -->
    <div *ngIf= "username.touched && username.invalid " class="alert alert-danger">
      <div *ngIf="username.errors.required"> Username is Required</div>
      <div *ngIf="username.errors.minlength"> Username should be of length {{ username.errors.minlength.requiredLength}}</div>
      
      <div *ngIf="username.errors.shouldBeUnique">Username already taken.</div>
    </div>

  <div class="form-group">
      <label for="password">Password</label>
      <input 
        formControlName="password"
        id="password" 
        type="password" 
        class="form-control">
    </div>

    <button class="btn btn-primary" type="submit " >Submit</button>
  </form>